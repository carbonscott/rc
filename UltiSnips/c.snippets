snippet h "" b
#include <stdio.h>

int main() {
	${1:// get started!}
	
	return 0;
}

endsnippet

snippet /fun/ "define a function in C" r
${1://[return type of function]} ${2://[function name]} (${3://[arg]}); 
$1 $2 ($3) {
	${4://[statements_of_function]}
}
endsnippet

snippet /td/ "typedef in C, especially define a complex type like a prototype for function accessed by pointer" r
typedef ${1:complex type} ${2:name for complex type}
endsnippet

snippet /tdf/ "typedef in C, especially define a complex type like a prototype for function accessed by pointer" r
typedef ${1://[return type of function]} (*${2://[function name]}) (${3://[arg]}); 
endsnippet

snippet /if/ "if statement" r
if (${1:Test}) {
	${2://statements}
}
endsnippet

snippet /elf/ "if statement" r
else if (${1:Test}) {
	${2://statements}
}
endsnippet

snippet /else/ "if statement" r
else (${1:Test}) {
	${2://statements}
}
endsnippet

snippet /for/ "for loop" r
for(${1:init = 0}; ${2:terminate}; ${3:++index}) {
	${4://statements}
}
endsnippet

snippet /while/ "while loop" r
while (${1:terminate}) {
	${2://statements}
}
endsnippet

snippet /malloc/ "memory allocation" r
malloc(sizeof(${1:/*type*/})*${2:/*number of such typed object*/});
free(${3:/*name of pointer who manages it*/});
$3 = NULL;
endsnippet

snippet /swi/ "switch statement" r
switch (${1:id that test depends on}) {
	case ${2:one value for id}:
	//case $2_2:
		${3://statement;
	    	break;}
	default:
		${4://statement;}

}
endsnippet


snippet /stru/ "struct declaration" r
struct ${1:prototype id} {
	${2:type} ${3:id of a type};
};
endsnippet
