template |head|
#!/usr/bin/env python
# -*- coding: utf-8 -*-

____
endtemplate


template |head3|
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

____
endtemplate


template |import-math|
import math
endtemplate


template |import-matplotlib|
import matplotlib; matplotlib.use('PS')
import matplotlib.pyplot as plt
endtemplate


template |plt.subplots|
plt.subplots(__3__,__2__,figsize=(__w__,__h__))
endtemplate


template |imshow|
imsow(____,interpolation='none',cmap='gray')
endtemplate


template |plt.savefig|
plt.savefig(____)
endtemplate


template |io-with|
with open(__file__,'__read_or_write__') as __file_handle__:
    ____
endtemplate


template |argparse.import|
import argparse
endtemplate


template |argparse.header|
parser = argparse.ArgumentParser(
description = 
"""__description__"""
,formatter_class=argparse.RawTextHelpFormatter)
endtemplate


template |argparse.add_arg|
parser.add_argument("-____", "--____",
    required = __True__,
    metavar  = ("____"),
    type     = __int__,
    nargs    = ____,
    help     = """__help__""",)
endtemplate


template |argparse.create|
args = parser.parse_args()
endtemplate


template |argparse.positional|
parser.add_argument(
    '__var__', 
    metavar = '____', 
    type    = ____, 
    __nargs   = 1,__ 
    help    = '____')
endtemplate


template |error-index|
IndexError: ____
endtemplate


template |io.data|
# Init matrix to store data...
ids = []
mat = []

# Read __1.dat__ and load data into matrix...
f = __'1'__
fi = "{STR}".format( STR = f )
with open(fi,'r') as fh:
    for line in fh.readlines():
        words = line.split()
        if words[0] == "#": continue
        mat.append( [ float(it) for it in words[1:] ] )
        ids.append( int(words[0]) )  
endtemplate


# [[[ Gnuplot ]]]

template |gp.gp|
gp = GnuplotPy3()
endtemplate


template |gp.eps|
gp("set terminal postscript eps size __3.5__, __2.62__  \\")
gp("                            enhanced color          \\")
gp("                            font 'Helvetica,__12__' \\")
gp("                            linewidth 2")
gp("set output '____.eps'")
endtemplate


template |gp.common_settings|
# Specify axis labels and graph title...
gp("set xlabel '{XLABEL}'".format( XLABEL = "Rank" ))
gp("set ylabel '{YLABEL}'".format( YLABEL = "Singular Value" ))
gp("set title  '{TITLE}' ".format( TITLE = '' ))

# Specify range of plotting...
DATA_SIZE = len(__DATA__)
gp("set xrange [-1:{DATA_SIZE}]".format( DATA_SIZE = DATA_SIZE ))
gp("unset key")

# Specify xtics, yscale...
gp("set xtics nomirror")
gp("set logscale y")

# Specify graph offset... 
gp("set offsets graph 0.0, 0.0, 0.0, 0.0")
endtemplate


template |gp.plot|
__# ANY EXTRA PLOT SETTINGS GO HERE BEFORE `plot` STATEMENT__

# Define plot styles...
plt = "{PLOT} '{FILE}' u {USE} \
       w {TYPE} {STYLE} {COLOR} {SIZE} \
       title '{TITLE}'{COMMA}"

# ...plot styles
sty = [
    # ...1st style
    plt.format(PLOT  = "plot",  FILE = "-",  USE = "1:2",  
               TYPE  = "p",
               STYLE = "ls 7",  
               COLOR = "lc rgb 'black'",
               SIZE  = "lt 1.5", 
               TITLE = '',  
               COMMA = ", "),

    # ...2nd style
    plt.format(PLOT  = "",  FILE = "-",  USE = "1:2",  
               TYPE  = "p",
               STYLE = "ls 6",  
               COLOR = "lc rgb 'blue'",
               SIZE  = "lt 1.5", 
               TITLE = '',  
               COMMA = "  "),
]

# ...make a plot and apply styles...
gpc  = sty[0]   # ...gpc stands for gnuplot command
gpc += sty[1]
gp(gpc)

# Feed data...
# ...data flow 1
datarng = (0, 3)
for i in range(*datarng): gp("{X} {Y}".format( X = i, Y = DATA[i] ))
gp('e')

# ...data flow 2
datarng = (3, len(DATA))
for i in range(*datrng): gp("{X} {Y}".format( X = i, Y = DATA[i] ))
gp('e')
endtemplate


template |gp.image|
__# ANY EXTRA PLOT SETTINGS GO HERE BEFORE `plot` STATEMENT, like color palette__

# Set color palette...
gp("set palette gray")
gp("set cbrange [0:255]")
gp("set palette defined (0 'black', 255 'white')")

# Define plot styles...
plt = "{PLOT} '{FILE}' u {USE} \
       w {TYPE} {STYLE} {COLOR} {SIZE} \
       title '{TITLE}'{COMMA}"

# ...plot styles
sty = [
    plt.format(PLOT  = "plot",  FILE = "-",  USE = "1:2:3",  
               TYPE  = "image",
               STYLE = "",  
               COLOR = "",
               SIZE  = "", 
               TITLE = '',  
               COMMA = ""),
]

# ...make a plot and apply styles
gpc = sty[0]
gp(gpc)

# Feed data...
__XSIZE__ = ____
__YSIZE__ = ____
for i in range(__XSIZE__): 
    for j in range(__YSIZE__):
        gp("{X} {Y} {Z}".format( X = i, Y = j, Z = __MAT__[j, i] ))
gp('e')
endtemplate


template |gp.custom_tic|
# Custom tic syntax...
gpc = "set x2tics rotate font '{FONT},{FONTSIZE}' (" . format( FONT = "Helvetica",
                                                               FONTSIZE = 12 )

# Size of all tics... 
XSIZE = len(LABELS)
datarng = (0, XSIZE)
for i in range(*datarng): 
    gpc += "'{LABEL}' {X}, ".format( LABEL = LABELS[i], X = i )
gpc = gpc[:-2] + ")"  # ...close custom tic syntax
gp(gpc)

# __a few more options__
gp("set x2tics out")
gp("unset xtics")
endtemplate


template |tally|
box = {}
for it in __list__: 
    if it not in box: box[it] = 1
    else: box[it] += 1
endtemplate


# [[[ matplotlib ]]]
# {

template |matplotlib.setup|
from matplotlib import use; use('PS')
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import numpy as np
endtemplate


template |matplotlib.simple.plot|
x = np.linspace(__x_init__, __x_final__, __step__)
y = __function__(x)
plt.plot(x, y)
plt.show()
endtemplate


template |matplotlib.create.plot|
plt.figure(__1__, figsize = (__6__, __4__))
plt.plot(__x__, __y__, '__g-__', label = '__data_1__')
plt.xlabel('__x__')
plt.ylabel('__y__')
plt.legend(loc = '__upper right__', title = '__legend__')
plt.axhline(y = __0__, color = '__gray__', zorder = __-1__)
plt.axvline(x = __0__, color = '__gray__', zorder = __-1__)
plt.show()
endtemplate


template |matplotlib.plot.opt|
plt.plot(__x__, __y__, color = '__green__', 
                       marker = '__D__',
                       markerfacecolor = '__yellow__',
                       markersize = __7__,
                       markeredgecolor = '__C1__')
endtemplate


template |matplotlib.simple.errorbar|
plt.errorbar(__x__, __y__, fmt = '__oC1__', 
                                 label  = '__data__',
                                 xerr   = __0.75__,
                                 yerr   = __yerror__,
                                 ecolor = '__black__')
endtemplate


template |matplotlib.set.lim|
plt.__x__lim(__-8__, __8__)
endtemplate


template |matplotlib.simple.subplot|
__fig__, __axes__ = plt.subplot(__rows__, __cols__, figsize = (__9.5__, __6__)
axes[__0, 0__].plot(____)
__fig__.savefig(__'....eps'__)
endtemplate


template |matplotlib.simple.twinx|
__ax1__.twinx()
endtemplate


template |matplotlib.advanced.subplot|
# __Create a figure window...__
__fig__ = plt.figure(__1__, figsize=(__9__, __7__))

# __Subplot: __
__ax1__ = __fig__.add_subplot(__2__, __2__, __1__)
__ax1__.plot(__x__, __y__)
__ax1__.set_xlabel('__x__')
__ax1__.set_ylabel('__y__')
__ax1__.set_title('__title__')

# __Subplot: __
__ax2__ = __fig__.add_subplot(__2__, __2__, __1__)
__ax2__.plot(__x__, __y__)
__ax2__.set_xlabel('__x__')
__ax2__.set_ylabel('__y__')
__ax2__.set_title('__title__')

# __Export...__
__fig__.tight_layout()
fig.savefig('__path.pdf__')
fig.show()
endtemplate


template |mat.example.plot_surface|
fig = plt.figure()
ax = fig.gca(projection='3d')

# Make data...
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)

# Plot the surface...
surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)

# Customize the z axis...
ax.set_zlim(-1.01, 1.01)
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))

# Add a color bar which maps values to colors...
fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()
endtemplate


template |matplotlib.opt.logx|
__ax__.set_xscale('log')
endtemplate


template |matplotlib.opt.logy|
__ax__.set_yscale('log')
endtemplate


template |matplotlib.opt.hline|
__ax__.axhline( y = __0__, color = __'gray'__, linewidth = __.1__, zorder = __-1__ )
endtemplate


# }


# [[[ os.path module ]]]
# {

template |os.path.abspath|
os.path.abspath('__Downloads__')   # __returns '/Users/scott/Downloads'__
endtemplate


template |os.path.basename|
os.path.basename(__'/foo/bar'__)   # __returns 'bar'__
endtemplate


template |os.path.dirname|
os.path.dirname(__'/Users/scott/Downloads/README.pdf'__)   # __returns /Users/scott/Downloads__
endtemplate


template |os.path.exists|
os.path.exists(__'path'__)
endtemplate


template |os.path.join|
os.path.join(__'parent_path'__, __'child_path'__)
endtemplate

# }




# [[[ string formating ]]]
# {

template |format.simple|
print "{__INT__:__04d__}, {__FLOAT__:__8.3f__}".format(__INT__ = ____, __FLOAT__ = ____)
endtemplate


template |format.align.left|
__<04d__
endtemplate


template |format.align.center|
__^10.3f__
endtemplate

# }


template |scriptname|
# I/O vars...
py_bs = os.path.basename(__file__)[:-3]    # ...Python script basename w/o ext
endtemplate


template |init_package|
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Import a class...
from .__GnuplotPy3__ import __GnuplotPy3__

# Import all fucntions from a file called __GnuplotPy3__...
from .__GnuplotPy3__ import * 

__all__ = [
            "__GnuplotPy3__",
          ]

version = "0.1"

print("""\

Welcome to __GnuplotPy3___{VERSION}""".format( VERSION = version ) )
print()
endtemplate


template |doc.function|
"""
Return __a matrix with ones on the diagonal and zeros elsewhere.__

Arguments:

    __param__ : __int__
        __explain__

Returns:

    __value__ : __int__
        __explain__

"""
endtemplate


template |doc.class|
"""
__What this class does__

Attributes:

    __attr__ : __type__
        __explain__

"""
endtemplate
