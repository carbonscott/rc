template |mpl.head|
import matplotlib              as mpl
import matplotlib.pyplot       as plt
import matplotlib.colors       as mcolors
import matplotlib.patches      as mpatches
import matplotlib.transforms   as mtransforms
import matplotlib.font_manager as font_manager
endtemplate


template |mpl.class|
class __Figure__:

    def __init__(self, data, title, figsize, **kwargs):
        self.data    = data
        self.title   = title
        self.figsize = figsize
        for k, v in kwargs.items(): setattr(self, k, v)

        self.config_fonts()

        return None


    def config_fonts(self):
        # Where to load external font...
        drc_py    = os.path.dirname(os.path.realpath(__file__))
        drc_font  = os.path.join("fonts", "Helvetica")
        fl_ttf    = f"Helvetica.ttf"
        path_font = os.path.join(drc_py, drc_font, fl_ttf)
        prop_font = font_manager.FontProperties( fname = path_font )

        # Add Font and configure font properties
        font_manager.fontManager.addfont(path_font)
        prop_font = font_manager.FontProperties(fname = path_font)
        self.prop_font = prop_font

        # Specify fonts for pyplot...
        plt.rcParams['font.family'] = prop_font.get_name()
        plt.rcParams['font.size']   = 18

        return None


    def create_panels(self):
        nrows, ncols = 5, 2 + 5 
        fig = plt.figure(figsize = self.figsize)

        gspec   = fig.add_gridspec(nrows, ncols,
                                   width_ratios  = [1, 4/20, 4/20, 4/20, 4/20, 4/20, 1/20],·
                                   height_ratios = [4/20, 4/20, 4/20, 4/20, 4/20], )

        ax_list  = (fig.add_subplot(gspec[0:5,0], aspect = 1), )
        ax_list += tuple(fig.add_subplot(gspec[i,1 + j], aspect = 1) for i in range(5) for j in range(5))
        ax_list += (fig.add_subplot(gspec[0:5,-1],  aspect = 20), )

        return fig, ax_list


    def plot(self):·
        ax_img  = self.ax_list[0]
        ax_cbar = self.ax_list[-1]
        im = ax_img.imshow(self.data, norm = self.divnorm)
        im.set_cmap('seismic')
        plt.colorbar(im, cax = ax_cbar, orientation="vertical", pad = 0.05)


    def plot_patch(self):
        ax = self.ax_list[1:-1]
        peak_x = self.peak_x
        peak_y = self.peak_y
        top = 25
        offset = 4 
        for i in range(top):
            x, y = peak_x[i], peak_y[i]
            patch = self.data[int(y - offset) : int(y + offset), int(x - offset) : int(x + offset)]

            im = ax[i].imshow(patch, norm = self.divnorm)
            im.set_cmap('seismic')
            ax[i].set_axis_off()


    def adjust_margin(self):
        self.fig.subplots_adjust(
            top=0.981,
            bottom=0.049,
            left=0.042,
            right=0.981,
            hspace=0.2,
            wspace=0.2
        )


    def show(self, filename = None): 
        self.fig, self.ax_list = self.create_panels()

        self.plot()
        self.plot_patch()
        ## self.adjust_margin()

        plt.suptitle(self.title, y = 0.95)
        if not isinstance(filename, str): 
            plt.show()
        else:
            # Set up drc...
            DRCPDF         = "pdfs"
            drc_cwd        = os.getcwd()
            prefixpath_pdf = os.path.join(drc_cwd, DRCPDF)
            if not os.path.exists(prefixpath_pdf): os.makedirs(prefixpath_pdf)

            # Specify file...
            fl_pdf = f"{filename}.pdf"
            path_pdf = os.path.join(prefixpath_pdf, fl_pdf)

            # Export...
            plt.savefig(path_pdf, dpi = 100)
endtemplate
